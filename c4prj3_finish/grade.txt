Grading at Sat Dec 12 02:00:25 UTC 2020
Running 'make clean' to do a clean build of your project
rm -rf *.o poker *~
Running 'make poker OTHERFLAGS=-O3' to build your project
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3   -c -o cards.o cards.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3   -c -o deck.o deck.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3   -c -o eval.o eval.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3   -c -o future.o future.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3   -c -o input.o input.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3   -c -o main.o main.c
gcc -o poker -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3 cards.o deck.o eval.o future.o input.o main.o
 - Starting with some Texas Hold'em hands
Running a simulation with 20000 draws for 2 hands...
Valgrind reported errors:
==248== Memcheck, a memory error detector
==248== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==248== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==248== Command: ./poker inp.txt 20000
==248== Parent PID: 247
==248== 
==248== Conditional jump or move depends on uninitialised value(s)
==248==    at 0x4C2FD0C: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==248==    by 0x403BA5: add_future_card (future.c:28)
==248==    by 0x403EA4: hand_from_string (input.c:55)
==248==    by 0x403F8B: read_input (input.c:70)
==248==    by 0x400D4A: main (main.c:37)
==248== 
==248== 
==248== HEAP SUMMARY:
==248==     in use at exit: 1,484 bytes in 93 blocks
==248==   total heap usage: 40,166 allocs, 40,073 frees, 1,140,200 bytes allocated
==248== 
==248== LEAK SUMMARY:
==248==    definitely lost: 76 bytes in 5 blocks
==248==    indirectly lost: 1,408 bytes in 88 blocks
==248==      possibly lost: 0 bytes in 0 blocks
==248==    still reachable: 0 bytes in 0 blocks
==248==         suppressed: 0 bytes in 0 blocks
==248== Rerun with --leak-check=full to see details of leaked memory
==248== 
==248== For counts of detected and suppressed errors, rerun with: -v
==248== Use --track-origins=yes to see where uninitialised values come from
==248== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Running a simulation with 25000 draws for 3 hands...
Valgrind reported errors:
==253== Memcheck, a memory error detector
==253== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==253== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==253== Command: ./poker inp.txt 25000
==253== Parent PID: 252
==253== 
==253== Conditional jump or move depends on uninitialised value(s)
==253==    at 0x4C2FD0C: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==253==    by 0x403BA5: add_future_card (future.c:28)
==253==    by 0x403EA4: hand_from_string (input.c:55)
==253==    by 0x403F8B: read_input (input.c:70)
==253==    by 0x400D4A: main (main.c:37)
==253== 
==253== 
==253== HEAP SUMMARY:
==253==     in use at exit: 1,744 bytes in 107 blocks
==253==   total heap usage: 100,222 allocs, 100,115 frees, 2,821,592 bytes allocated
==253== 
==253== LEAK SUMMARY:
==253==    definitely lost: 88 bytes in 5 blocks
==253==    indirectly lost: 1,656 bytes in 102 blocks
==253==      possibly lost: 0 bytes in 0 blocks
==253==    still reachable: 0 bytes in 0 blocks
==253==         suppressed: 0 bytes in 0 blocks
==253== Rerun with --leak-check=full to see details of leaked memory
==253== 
==253== For counts of detected and suppressed errors, rerun with: -v
==253== Use --track-origins=yes to see where uninitialised values come from
==253== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Running a simulation with 25000 draws for 3 hands...
Valgrind reported errors:
==258== Memcheck, a memory error detector
==258== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==258== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==258== Command: ./poker inp2.txt 25000
==258== Parent PID: 257
==258== 
==258== Conditional jump or move depends on uninitialised value(s)
==258==    at 0x4C2FD0C: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==258==    by 0x403BA5: add_future_card (future.c:28)
==258==    by 0x403EA4: hand_from_string (input.c:55)
==258==    by 0x403F8B: read_input (input.c:70)
==258==    by 0x400D4A: main (main.c:37)
==258== 
==258== 
==258== HEAP SUMMARY:
==258==     in use at exit: 1,744 bytes in 107 blocks
==258==   total heap usage: 100,205 allocs, 100,098 frees, 2,821,116 bytes allocated
==258== 
==258== LEAK SUMMARY:
==258==    definitely lost: 88 bytes in 5 blocks
==258==    indirectly lost: 1,656 bytes in 102 blocks
==258==      possibly lost: 0 bytes in 0 blocks
==258==    still reachable: 0 bytes in 0 blocks
==258==         suppressed: 0 bytes in 0 blocks
==258== Rerun with --leak-check=full to see details of leaked memory
==258== 
==258== For counts of detected and suppressed errors, rerun with: -v
==258== Use --track-origins=yes to see where uninitialised values come from
==258== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Running a simulation with 25000 draws for 2 hands...
Valgrind reported errors:
==263== Memcheck, a memory error detector
==263== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==263== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==263== Command: ./poker inp2.txt 25000
==263== Parent PID: 262
==263== 
==263== Conditional jump or move depends on uninitialised value(s)
==263==    at 0x4C2FD0C: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==263==    by 0x403BA5: add_future_card (future.c:28)
==263==    by 0x403EA4: hand_from_string (input.c:55)
==263==    by 0x403F8B: read_input (input.c:70)
==263==    by 0x400D4A: main (main.c:37)
==263== 
==263== 
==263== HEAP SUMMARY:
==263==     in use at exit: 1,484 bytes in 93 blocks
==263==   total heap usage: 50,195 allocs, 50,102 frees, 1,421,012 bytes allocated
==263== 
==263== LEAK SUMMARY:
==263==    definitely lost: 76 bytes in 5 blocks
==263==    indirectly lost: 1,408 bytes in 88 blocks
==263==      possibly lost: 0 bytes in 0 blocks
==263==    still reachable: 0 bytes in 0 blocks
==263==         suppressed: 0 bytes in 0 blocks
==263== Rerun with --leak-check=full to see details of leaked memory
==263== 
==263== For counts of detected and suppressed errors, rerun with: -v
==263== Use --track-origins=yes to see where uninitialised values come from
==263== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Running a simulation with 80000 draws for 4 hands...
Valgrind reported errors:
==268== Memcheck, a memory error detector
==268== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==268== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==268== Command: ./poker inp3.txt 80000
==268== Parent PID: 267
==268== 
==268== Conditional jump or move depends on uninitialised value(s)
==268==    at 0x4C2FD0C: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==268==    by 0x403BA5: add_future_card (future.c:28)
==268==    by 0x403EA4: hand_from_string (input.c:55)
==268==    by 0x403F8B: read_input (input.c:70)
==268==    by 0x400D4A: main (main.c:37)
==268== 
==268== 
==268== HEAP SUMMARY:
==268==     in use at exit: 1,812 bytes in 115 blocks
==268==   total heap usage: 480,236 allocs, 480,121 frees, 13,461,284 bytes allocated
==268== 
==268== LEAK SUMMARY:
==268==    definitely lost: 100 bytes in 5 blocks
==268==    indirectly lost: 1,712 bytes in 110 blocks
==268==      possibly lost: 0 bytes in 0 blocks
==268==    still reachable: 0 bytes in 0 blocks
==268==         suppressed: 0 bytes in 0 blocks
==268== Rerun with --leak-check=full to see details of leaked memory
==268== 
==268== For counts of detected and suppressed errors, rerun with: -v
==268== Use --track-origins=yes to see where uninitialised values come from
==268== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Running a simulation with 30000 draws for 2 hands...
Valgrind reported errors:
==273== Memcheck, a memory error detector
==273== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==273== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==273== Command: ./poker inp.txt 30000
==273== Parent PID: 272
==273== 
==273== Conditional jump or move depends on uninitialised value(s)
==273==    at 0x4C2FD0C: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==273==    by 0x403BA5: add_future_card (future.c:28)
==273==    by 0x403EA4: hand_from_string (input.c:55)
==273==    by 0x403F8B: read_input (input.c:70)
==273==    by 0x400D4A: main (main.c:37)
==273== 
==273== 
==273== HEAP SUMMARY:
==273==     in use at exit: 1,340 bytes in 87 blocks
==273==   total heap usage: 60,172 allocs, 60,085 frees, 1,699,324 bytes allocated
==273== 
==273== LEAK SUMMARY:
==273==    definitely lost: 76 bytes in 5 blocks
==273==    indirectly lost: 1,264 bytes in 82 blocks
==273==      possibly lost: 0 bytes in 0 blocks
==273==    still reachable: 0 bytes in 0 blocks
==273==         suppressed: 0 bytes in 0 blocks
==273== Rerun with --leak-check=full to see details of leaked memory
==273== 
==273== For counts of detected and suppressed errors, rerun with: -v
==273== Use --track-origins=yes to see where uninitialised values come from
==273== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
 - Next, few Seven Card Stud hands
Running a simulation with 30000 draws for 2 hands...
Valgrind reported errors:
==278== Memcheck, a memory error detector
==278== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==278== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==278== Command: ./poker inp.txt 30000
==278== Parent PID: 277
==278== 
==278== Conditional jump or move depends on uninitialised value(s)
==278==    at 0x4C2FD0C: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==278==    by 0x403BA5: add_future_card (future.c:28)
==278==    by 0x403EA4: hand_from_string (input.c:55)
==278==    by 0x403F8B: read_input (input.c:70)
==278==    by 0x400D4A: main (main.c:37)
==278== 
==278== 
==278== HEAP SUMMARY:
==278==     in use at exit: 1,484 bytes in 94 blocks
==278==   total heap usage: 60,163 allocs, 60,069 frees, 1,699,672 bytes allocated
==278== 
==278== LEAK SUMMARY:
==278==    definitely lost: 76 bytes in 5 blocks
==278==    indirectly lost: 1,408 bytes in 89 blocks
==278==      possibly lost: 0 bytes in 0 blocks
==278==    still reachable: 0 bytes in 0 blocks
==278==         suppressed: 0 bytes in 0 blocks
==278== Rerun with --leak-check=full to see details of leaked memory
==278== 
==278== For counts of detected and suppressed errors, rerun with: -v
==278== Use --track-origins=yes to see where uninitialised values come from
==278== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Running a simulation with 40000 draws for 3 hands...
Valgrind reported errors:
==283== Memcheck, a memory error detector
==283== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==283== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==283== Command: ./poker inp2.txt 40000
==283== Parent PID: 282
==283== 
==283== Conditional jump or move depends on uninitialised value(s)
==283==    at 0x4C2FD0C: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==283==    by 0x403BA5: add_future_card (future.c:28)
==283==    by 0x403EA4: hand_from_string (input.c:55)
==283==    by 0x403F8B: read_input (input.c:70)
==283==    by 0x400D4A: main (main.c:37)
==283== 
==283== 
==283== HEAP SUMMARY:
==283==     in use at exit: 1,664 bytes in 105 blocks
==283==   total heap usage: 160,046 allocs, 159,941 frees, 4,495,136 bytes allocated
==283== 
==283== LEAK SUMMARY:
==283==    definitely lost: 88 bytes in 5 blocks
==283==    indirectly lost: 1,576 bytes in 100 blocks
==283==      possibly lost: 0 bytes in 0 blocks
==283==    still reachable: 0 bytes in 0 blocks
==283==         suppressed: 0 bytes in 0 blocks
==283== Rerun with --leak-check=full to see details of leaked memory
==283== 
==283== For counts of detected and suppressed errors, rerun with: -v
==283== Use --track-origins=yes to see where uninitialised values come from
==283== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
 - Then one from a completely made up poker variant
Running a simulation with 100000 draws for 6 hands...
Valgrind reported errors:
==288== Memcheck, a memory error detector
==288== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==288== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==288== Command: ./poker whacky.txt 100000
==288== Parent PID: 287
==288== 
==288== Conditional jump or move depends on uninitialised value(s)
==288==    at 0x4C2FD0C: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==288==    by 0x403BA5: add_future_card (future.c:28)
==288==    by 0x403EA4: hand_from_string (input.c:55)
==288==    by 0x403F8B: read_input (input.c:70)
==288==    by 0x400D4A: main (main.c:37)
==288== 
==288== 
==288== HEAP SUMMARY:
==288==     in use at exit: 2,316 bytes in 142 blocks
==288==   total heap usage: 998,914 allocs, 998,772 frees, 27,984,980 bytes allocated
==288== 
==288== LEAK SUMMARY:
==288==    definitely lost: 124 bytes in 5 blocks
==288==    indirectly lost: 2,192 bytes in 137 blocks
==288==      possibly lost: 0 bytes in 0 blocks
==288==    still reachable: 0 bytes in 0 blocks
==288==         suppressed: 0 bytes in 0 blocks
==288== Rerun with --leak-check=full to see details of leaked memory
==288== 
==288== For counts of detected and suppressed errors, rerun with: -v
==288== Use --track-origins=yes to see where uninitialised values come from
==288== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: F
